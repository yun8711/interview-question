import{_ as i,S as l,N as a,Q as e}from"./chunks/framework.d2ce16e8.js";const u=JSON.parse('{"title":"CSS","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/css.md","filePath":"docs/css.md","lastUpdated":1708601980000}'),n={name:"docs/css.md"},o=e('<h1 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h1><h3 id="display-的-block、inline-和-inline-block-的区别" tabindex="-1">display 的 block、inline 和 inline-block 的区别 <a class="header-anchor" href="#display-的-block、inline-和-inline-block-的区别" aria-label="Permalink to &quot;display 的 block、inline 和 inline-block 的区别&quot;">​</a></h3><p>（1）block：会独占一行，多个元素会另起一行，可以设置 width、height、margin 和 padding 属性；</p><p>（2）inline：元素不会独占一行，设置 width、height 属性无效。 但可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；</p><p>（3）inline-block：将对象设置为 inline 对象，但对象的内容作为 block 对象呈现，之后的内联对象会被排列在同一行内。</p><p>对于行内元素和块级元素，其特点如下：</p><p>（1）行内元素</p><ul><li>设置宽高无效；</li><li>可以设置水平方向的 margin 和 padding 属性，不能设置垂直方向的 padding 和 margin；</li><li>不会自动换行；</li></ul><p>（2）块级元素</p><ul><li>可以设置宽高；</li><li>设置 margin 和 padding 都有效；</li><li>可以自动换行；</li><li>多个块状，默认排列从上到下。</li></ul><h3 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h3><p>本质上是一个盒子，封装周围的html元素，包括：margin、border、padding、content</p><ul><li>标准盒模型：width/height只是内容尺寸，不包含padding、border，通过box-sizing:content-box设置，浏览器默认设置</li><li>IE盒模型/怪异盒模型：width/height包含了padding、border，通过box-sizing:border-box设置</li></ul><h3 id="bfc-块级格式化上下文-脱离文档流" tabindex="-1">BFC/块级格式化上下文/脱离文档流 <a class="header-anchor" href="#bfc-块级格式化上下文-脱离文档流" aria-label="Permalink to &quot;BFC/块级格式化上下文/脱离文档流&quot;">​</a></h3><p>BFC是CSS布局的一个概念，是一块独立的渲染区域，用于决定块盒子的布局及浮动相互影响范围的一个区域。里面的元素不会影响到外部的元素。BFC中的父子元素、兄弟元素边距会重叠，并且取最大值，空元素的边距重叠是取margin与padding的最大值。</p><p>一个BFC的范围包含创建上下文元素的所有子元素，但不包括创建了新BFC的子元素的内部元素。也就是说一个元素不能同时存在于两个BFC中。</p><p>BFC触发方式：</p><ul><li>根元素，即HTML标签、body</li><li>浮动元素：float值为除 none 以外的值，如left、right</li><li>overflow值为auto、scroll、hidden</li><li>display值为inline-block、 table-cell、 table-caption、 table、 inline-table、 flex、 inline-flex、 grid、 inline-grid</li><li>position值为absolute、fixed</li></ul><p>渲染规则或布局规则：</p><ul><li>内部的box会在垂直方向，自顶而下放置</li><li>box垂直方向的距离由margin决定，属于同一个BFC的两个相邻box的margin会重叠</li><li>每个元素的margin-left与包含块的border-left相接触，即使浮动元素也是如此</li><li>BFC的区域不会与float的元素区域重叠</li><li>计算BFC的高度时，浮动子元素也参与计算</li></ul><p>BFC的应用：</p><ul><li>阻止元素被浮动元素覆盖：正常文档流的block元素可能被一个float元素覆盖，挤占正常文档流，可以设置一个元素的float、display、position值等方式触发BFC，以阻止被浮动例子覆盖。</li><li>可以包含浮动元素：通过改变包含浮动子元素的父盒子的属性值，触发 BFC，以此来包含子元素的浮动盒子。</li><li>阻止因浏览器四舍五入造成的多列布局换行</li><li>阻止相邻元素的margin合并：让两个相邻块级子元素分属不同的BFC可以阻止margin重叠</li></ul><h3 id="ifc-行内格式化上下文" tabindex="-1">IFC/行内格式化上下文 <a class="header-anchor" href="#ifc-行内格式化上下文" aria-label="Permalink to &quot;IFC/行内格式化上下文&quot;">​</a></h3><p>由不包含块级盒的块容器建立，块容器盒中只有内联盒子。</p><p>布局规则：</p><ul><li>在IFC里，盒子是水平一个接着一个排列</li><li>盒内元素的margin、border、padding都有效</li><li>垂直对齐方式：以它们的底部、顶部对象，或以它们里面的文本的基线对齐</li></ul><h3 id="伪类和伪元素" tabindex="-1">伪类和伪元素 <a class="header-anchor" href="#伪类和伪元素" aria-label="Permalink to &quot;伪类和伪元素&quot;">​</a></h3><p>伪类：已有元素处于某种状态时，为其添加的样式，根据用户行为面动态变化，如:hover、:focus、:first-child</p><p>伪元素：dom树没有定义的虚拟的元素，用于创建不存在于dom树中的元素，并为其添加样式，如:before、:after</p>',29),t=[o];function d(r,s,p,c,h,b){return l(),a("div",null,t)}const f=i(n,[["render",d]]);export{u as __pageData,f as default};
