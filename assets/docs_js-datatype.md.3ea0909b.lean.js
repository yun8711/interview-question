import{_ as s,S as a,N as l,Q as n}from"./chunks/framework.d2ce16e8.js";const A=JSON.parse('{"title":"js数据类型","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"docs/js-datatype.md","filePath":"docs/js-datatype.md","lastUpdated":1708601980000}'),o={name:"docs/js-datatype.md"},p=n(`<h1 id="js数据类型" tabindex="-1">js数据类型 <a class="header-anchor" href="#js数据类型" aria-label="Permalink to &quot;js数据类型&quot;">​</a></h1><h2 id="数据类型" tabindex="-1">数据类型 <a class="header-anchor" href="#数据类型" aria-label="Permalink to &quot;数据类型&quot;">​</a></h2><h3 id="基本数据类型" tabindex="-1">基本数据类型 <a class="header-anchor" href="#基本数据类型" aria-label="Permalink to &quot;基本数据类型&quot;">​</a></h3><p>Undefined、Null、Boolean、Number、String、Object，Symbol（ES6新增），BigInt（ES2020新增）</p><h3 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h3><p>Object，Array（特殊的对象），Function（可调用的对象），</p><p>其他：Map、Set、WeakMap、WeakSe、Date、RegExp，</p><p>以及Promise等其他内置对象</p><h3 id="基本-引用数据类型的区别" tabindex="-1">基本/引用数据类型的区别 <a class="header-anchor" href="#基本-引用数据类型的区别" aria-label="Permalink to &quot;基本/引用数据类型的区别&quot;">​</a></h3><p>1、基本数据类型的值是不可变的，当操作一个基本数据类型的变量时，实际上是在操作这个变量的副本，而不是原始值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">b </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(b)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// 2</span></span></code></pre></div><p>对引用数据类型的变量的操作，实际上是操作这个变量的引用</p><p>2、存储位置和赋值方式：</p><ul><li>基本数据类型的值存储在栈（stack）内存中，占用空间小、大小固定、属于频繁使用的数据</li><li>引用数据类型存储在堆（heap）内存中，占据空间大，大小不固定。在栈中存储了指针，指向堆内存地址</li></ul><h3 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h3><p>不能使用 new 关键字创建</p><p>主要用途是作为对象的属性键，以避免属性名冲突</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> sym </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">[</span><span style="color:#BABED8;">sym</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(obj[sym])</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 输出 &quot;value&quot;</span></span></code></pre></div><p>这样的属性不会出现在常规的遍历操作中（如 for...in 循环或 Object.keys 方法），但可以通过 <code>Object.getOwnPropertySymbols</code> 方法获取到</p><h3 id="nan" tabindex="-1">NaN <a class="header-anchor" href="#nan" aria-label="Permalink to &quot;NaN&quot;">​</a></h3><p><code>typeof NaN</code>返回number，但是它不等于自己</p><p><code>isNaN</code>方法会尝试将参数转换为数值，任何不能被转换为数值的值都返回true，因此非数字值也会返回true，影响判断</p><p><code>Number.isNaN()</code>函数会先判断参数是否为数字，不会对参数进行转换，对于NaN的判断更准确</p><h3 id="为什么-typeof-null-object" tabindex="-1">为什么 typeof null === object <a class="header-anchor" href="#为什么-typeof-null-object" aria-label="Permalink to &quot;为什么 typeof null === object&quot;">​</a></h3><p>在JavaScript的最初版本中，使用的是32位系统，为了性能考虑使用低位存储了变量的类型信息，000开头代表是对象，而null表示为全零，所以导致typeof null返回的是object。</p><p>虽然这是一个已知的错误，但由于这个错误已经被JavaScript广泛采用，修复它可能会导致一些现有的JavaScript代码无法工作</p><h3 id="null-与-undefined-的区别" tabindex="-1">null 与 undefined 的区别 <a class="header-anchor" href="#null-与-undefined-的区别" aria-label="Permalink to &quot;null 与 undefined 的区别&quot;">​</a></h3><p>undefined</p><ul><li>表示未定义，就是变量声明了，但还未赋值。</li><li>它不是一个保留字，可以用作变量名，一般不建议这么做，如果想获得一个undefined值，可使用<code>void 0</code>这种方式</li></ul><p>null</p><ul><li>表示空值，一般用来做为可能返回对象的变量的初始化值。null在使用typeof进行判断时会返回&quot;object&quot;</li></ul><h3 id="包装类型" tabindex="-1">包装类型 <a class="header-anchor" href="#包装类型" aria-label="Permalink to &quot;包装类型&quot;">​</a></h3><p>基本数据类型（Number、String、Boolean）都有对应的包装类型，这些包装类型的对象是一种特殊的引用类型，它们在很多情况下表现得像基本数据类型。</p><p>当我们对一个基本数据类型的值调用方法时，JavaScript会临时将其转换为对应的包装类型对象，以便我们可以调用对象的方法。调用结束后，再将其转换回基本数据类型</p><p><strong>注意</strong>：虽然基本数据类型有对应的包装类型，但不推荐直接使用包装类型创建对象，可能会引起一些意想不到的结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> str1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> str2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(str1 </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> str2)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><p>在这个例子中，str1和str2的值看起来是一样的，但它们的类型不同，str1是基本数据类型，str2是引用数据类型，所以它们的比较结果是false</p><h3 id="类数组对象" tabindex="-1">类数组对象 <a class="header-anchor" href="#类数组对象" aria-label="Permalink to &quot;类数组对象&quot;">​</a></h3><p>一种拥有length属性和索引元素，但不具有数组原型上的方法（如push，pop）的对象，常见的类数组对象有：</p><ul><li><code>arguments</code> 对象：它在函数内部可用，用于访问函数的实参</li><li><code>document.getElementsByTagName</code>或<code>document.querySelectorAll</code>返回的NodeList对象</li></ul><p>它们不能直接调用数组的方法，但可以通过 <code>Array.prototype</code> 间接调用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 使用Array.prototype上的方法</span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">push</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(arrayLike</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将类数组对象转换为真正的数组</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> array </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#BABED8;">(arrayLike)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用扩展运算符转换为数组</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> array </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">arrayLike]</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="map和object的区别" tabindex="-1">Map和Object的区别 <a class="header-anchor" href="#map和object的区别" aria-label="Permalink to &quot;Map和Object的区别&quot;">​</a></h3><ul><li>Map默认不包含任何键，只能显式插入键；Object原型链上的键名可能与自定义键名冲突。</li><li>Map的键可以是任意值，包括函数、对象、基本类型；Object的键必须是String或Symbol</li><li>Map中的key是有序的，按插入顺序；Object的键是无序的</li><li>Map有size属性，Object键值个数只能手动计算</li><li>Map可以被直接迭代，Object要以某种方式转换后才能迭代</li><li>Map在频繁增删值的场景下表现更好</li></ul><h3 id="map-和-weakmap" tabindex="-1">Map 和 WeakMap <a class="header-anchor" href="#map-和-weakmap" aria-label="Permalink to &quot;Map 和 WeakMap&quot;">​</a></h3><p>都是用于存储键值对的集合，区别在于：</p><p>1、键的类型：</p><ul><li>在Map中，键可以是任何类型，包括对象、基本类型或者null。</li><li>WeakMap中，键必须是对象，不能是基本类型</li></ul><p>2、遍历</p><ul><li>Map对象可以被遍历，它是可迭代的</li><li>WeakMap不可以被遍历，因为其键是弱引用，随时可能消失，并且JavaScript引擎有可能随机删除键/值对</li></ul><p>3、键值总数</p><ul><li>Map对象有一个size属性，返回映射对象中的键/值对数目</li><li>WeakMap没有size属性，不能计算和获取大小</li></ul><p>4、方法</p><ul><li>Map有更多的方法，例如<code>clear()</code>和<code>forEach()</code></li><li>WeakMap只有四个方法：<code>get(), set(), has(), delete()</code></li></ul><p>5、弱引用</p><ul><li>WeakMap持有的是每个键对象的**“弱引用”**，这意味着在没有其他引用存在时，WeakMap的键是可以被垃圾回收的。这个特性使得WeakMap特别适合创建与对象关联的私有数据</li><li>Map中的键则不会被垃圾回收机制影响。</li></ul><h3 id="weakmap-应用场景" tabindex="-1">WeakMap 应用场景 <a class="header-anchor" href="#weakmap-应用场景" aria-label="Permalink to &quot;WeakMap 应用场景&quot;">​</a></h3><p>1、关联额外信息：当我们想在一个对象上关联一些额外的信息，但又不想干扰垃圾回收时，可以使用WeakMap。</p><p>例如，我们可以将一个DOM元素作为键，将一些与之相关的信息作为值。当DOM元素被删除时，这些信息也会被自动清理。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> element </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some-element</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#BABED8;">(element</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some information</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>2、缓存计算结果：如果我们有一个函数，它接受一个对象作为参数，并返回一些计算结果，我们可以使用WeakMap来缓存这些结果。当相同的对象再次传入时，我们可以直接从WeakMap中获取结果，而不需要重新计算</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">compute</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* some expensive computation */</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>3、私有属性：在ES6类中，我们可以使用WeakMap来实现私有属性。我们可以将实例对象作为键，将私有属性作为值。由于WeakMap的键是弱引用，所以当实例对象被垃圾回收时，私有属性也会被清理。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> wm </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">MyClass</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> privateData</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">secret</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">doSomething</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">privateData</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">wm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">privateData</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// do something with privateData</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>4、在 Vue3 源码中，WeakMap被用于存储与每个组件实例相关的依赖项（deps）和观察者（observers），这些数据在组件实例被销毁时不再需要，因此使用WeakMap可以确保它们被正确地清理</p><p>因为WeakMap允许将对象作为键，并且当这个对象被垃圾回收时，对应的值也会被自动清理。这使得WeakMap成为存储与对象生命周期绑定的数据的理想选择</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建一个WeakMap来存储私有数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> privateData </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">WeakMap</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在组件实例创建时，将私有数据存储在WeakMap中</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">createComponentInstance</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">privateData</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    deps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    observers</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">instance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 在组件实例销毁时，私有数据会自动从WeakMap中清理</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">destroyComponentInstance</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">instance</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// do some cleanup</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="数据类型检测" tabindex="-1">数据类型检测 <a class="header-anchor" href="#数据类型检测" aria-label="Permalink to &quot;数据类型检测&quot;">​</a></h2><p>1、typeof运算符</p><p>判断string、number、boolean、undefined、function为预期，array、object、null等被判断为object</p><p>2、instanceof 运算符</p><p>原理是判断<strong>构造函数的原型（prototype 属性）<strong>是否在</strong>实例对象的原型链上</strong></p><p><strong>注意</strong>：对于基本类型的检测会返回false，因为基本类型是没有原型链的</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">([] </span><span style="color:#89DDFF;">instanceof</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Array</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre></div><p>3、constructor 属性</p><p>通过访问原型上的constructor属性（它指向对象的构造函数）来判断数据类型</p><p><strong>注意</strong>：如果原型被改写，则不能返回预期结果</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#F78C6C;">123</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> Number)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> String)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> Boolean)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">((</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> Object)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(([])</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> Array)</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>4、<code>Object.prototype.toString.call()</code> 方法</p><p>是一种更准确的类型检测方法，通过Object的原型上的toString方法，返回值是一个字符串，形式为<code>[object Type]</code>，其中Type是对象的类型</p><p>像array、function等类型都重写了toString方法，所以它可以正确区分数组、null和对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">([]))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Array]&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Object]&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">null</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Null]&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">undefined</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Undefined]&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">123</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Number]&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object String]&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Boolean]&quot;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> </span><span style="color:#676E95;font-style:italic;">// &quot;[object Function]&quot;</span></span></code></pre></div><p>5、其他特殊的判断方法</p><p><code>Number.isFinite()</code>：检查一个值是否为有限的数。</p><p><code>Number.isInteger()</code>：检查一个值是否为整数。</p><p><code>Number.isNaN()</code>：检查一个值是否为NaN。这个方法比全局的isNaN()更严格，因为它只对NaN返回true，而全局的isNaN()会首先尝试将参数转换为数字。</p><p><code>Array.isArray()</code>：检查一个值是否为数组</p><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><h3 id="类型转换方法" tabindex="-1">类型转换方法 <a class="header-anchor" href="#类型转换方法" aria-label="Permalink to &quot;类型转换方法&quot;">​</a></h3><p>主要是指使用<code>Number()、String()、Boolean()</code>三个函数，手动将各种类型的值转换为目标类型</p><p>1、<strong>转为字符串：</strong><code>toString()</code>方法不可转null、undefined，<code>String()</code>都能转</p><p>String()方法的规则：</p><ol><li>先调用对象自身的toString()方法，返回原始类型则对该值使用String()方法</li><li>如果返回对象，再调用valueOf方法，如果返回原始类型的值，则使用该值的String函数</li><li>如果valueOf返回对象，报错</li></ol><p>具体转换：</p><ul><li>数值：转为对应的字符串</li><li>字符串：原来的值</li><li>布尔值：true转为&quot;true&quot;，false转为&quot;false&quot;</li><li>undefined：转为&quot;undefined&quot;</li><li>null：转为&quot;null&quot;</li><li>对象：返回一个类型字符串 <ul><li>对象：返回一个类型字符串，如：<code>String({a: 1}) // &quot;[object Object]&quot;</code></li><li>数组：返回数组的字符串形式，相当于调用Array.prototype.join()方法</li><li>Date：转为时间格式字符串</li></ul></li></ul><p>2、**转为数字：<code>**Number()</code>，比<code>parseInt</code>严格</p><p>具体转换：</p><ul><li>数值：原来的值</li><li>字符串：如果可以被解析为数值，则转换为相应的值，空字符串转为0，否则返回NaN</li><li>布尔值：true转为1，false转为0</li><li>undefined：转为NaN</li><li>null：转为0</li><li>对象： <ul><li>对象：NaN</li><li>数组：空数组转为0，只有一个元素时且可以转为数字时，对该元素使用Number()转换，其他均为NaN</li><li>Date：返回时间戳</li></ul></li></ul><p>3、**转为布尔值：<code>**Boolean()</code></p><ul><li>转为false：undefined、null、0（含-0和+0）、NaN、空字符串</li><li>其他情况全转为true</li></ul><h3 id="object-is-、-、-的区别" tabindex="-1">Object.is()、<code>===</code>、<code>==</code>的区别 <a class="header-anchor" href="#object-is-、-、-的区别" aria-label="Permalink to &quot;Object.is()、\`===\`、\`==\`的区别&quot;">​</a></h3><p>双等号会进行类型转换再判断</p><p>三等号不做类型转换，先判断类型</p><p><code>Object.is()</code> 一般与三等号相同，但对特殊值做了处理，如-0和+0不相等，两个NaN相等</p><h3 id="转换规则" tabindex="-1">== 转换规则 <a class="header-anchor" href="#转换规则" aria-label="Permalink to &quot;== 转换规则&quot;">​</a></h3><ul><li>都是对象：两个对象都是同一引用返回true</li><li>null和undefined：true</li><li>如果类型相同： <ul><li>Number：+0==-0，NaN与任何值不相等</li></ul></li><li>如果类型不同： <ul><li>数字与字符串：转为数字值</li><li>如果有Boolean：转为1或0</li><li>对象与数字/字符串：调用对象的valueOf()和toString()将对象转为原始值</li></ul></li></ul><h3 id="转换规则-1" tabindex="-1">=== 转换规则 <a class="header-anchor" href="#转换规则-1" aria-label="Permalink to &quot;=== 转换规则&quot;">​</a></h3><ul><li>类型不同返回false</li><li>都是对象：两个对象都是同一引用返回true</li><li>两个都为null或undefined，返回true</li><li>任意一个数为NaN，返回false</li><li>否则比较两个数的值： <ul><li>数字类型必须值相同，+0与-0相同</li></ul></li></ul><h3 id="关系运算符-转换规则" tabindex="-1">关系运算符（&lt;, &gt;, &lt;=, &gt;=）转换规则 <a class="header-anchor" href="#关系运算符-转换规则" aria-label="Permalink to &quot;关系运算符（&lt;, &gt;, &lt;=, &gt;=）转换规则&quot;">​</a></h3><ul><li>数据类型相同： <ul><li>都为字符串：按Unicode编码按顺序比较</li><li>都为数值：按值比较</li></ul></li><li>数据类型不同： <ul><li>含NaN：返回false</li><li>一方为数值，另一方会转换为数值然后比较，否则为false</li><li>一方为字符串，别一方转换为字符串后比较，否则为false</li><li>如果有对象，则调用对象的valueOf()和toString()将对象转为原始值</li><li>如果一方为布尔值，则会转换为数值</li></ul></li></ul><h2 id="数值计算" tabindex="-1">数值计算 <a class="header-anchor" href="#数值计算" aria-label="Permalink to &quot;数值计算&quot;">​</a></h2><h3 id="精度丢失-为什么0-1-0-2-0-3-如何能相等" tabindex="-1">精度丢失/为什么0.1+0.2!==0.3，如何能相等 <a class="header-anchor" href="#精度丢失-为什么0-1-0-2-0-3-如何能相等" aria-label="Permalink to &quot;精度丢失/为什么0.1+0.2!==0.3，如何能相等&quot;">​</a></h3><p>js中number类型遵循IEEE 754标准，使用64位浮点格式表示数字，也就是双精度浮点数，在二进制中，1 符号位，11指数位，52尾数，就是说小数部分最多只保留52位，后面的位数就会被舍弃（0舍1入）。</p><p>这就导致了 js 不能精确表达所有的浮点数，而只能是一个近似值。</p><p>有些数在转换成二进制时会发生无限循环，多余的位数会被截断，造成精度丢失。</p>`,115),e=[p];function t(c,r,y,D,F,i){return a(),l("div",null,e)}const u=s(o,[["render",t]]);export{A as __pageData,u as default};
